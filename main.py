import os
import requests
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_KEY")
MODEL = "mistralai/mistral-7b"

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á (–≤ –ø–∞–º—è—Ç–∏) ===
user_tasks = {}
reminder_jobs = {}

# === ChatGPT —á–µ—Ä–µ–∑ OpenRouter ===
async def ask_ai(prompt: str):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }

    data = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."},
            {"role": "user", "content": prompt}
        ]
    }

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers, json=data, timeout=30
        )
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter API: {e}"

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/todo ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/tasks ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/done ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/remind ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤\n\n"
        "–ê –µ—â—ë —è —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã üß†"
    )

async def todo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    task_text = " ".join(context.args)

    if not task_text:
        await update.message.reply_text("‚úèÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: `/todo –∫—É–ø–∏—Ç—å —Ö–ª–µ–±`")
        return

    user_tasks.setdefault(user_id, []).append(task_text)
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")

async def tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    tasks = user_tasks.get(user_id, [])

    if not tasks:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    task_list = "\n".join([f"{i+1}. {t}" for i, t in enumerate(tasks)])
    await update.message.reply_text(f"üóí –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n{task_list}")

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    tasks = user_tasks.get(user_id, [])

    if not tasks:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    try:
        task_num = int(context.args[0]) - 1
        removed = tasks.pop(task_num)
        await update.message.reply_text(f"üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {removed}")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: `/done 1` —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É.")

async def remind_user(context: ContextTypes.DEFAULT_TYPE):
    user_id = context.job.chat_id
    tasks = user_tasks.get(user_id, [])
    if tasks:
        task_list = "\n".join([f"‚Ä¢ {t}" for t in tasks])
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –£ —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–¥–∞—á–∏:\n\n{task_list}"
        )

async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id

    if user_id in reminder_jobs:
        reminder_jobs[user_id].schedule_removal()
        del reminder_jobs[user_id]
        await update.message.reply_text("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return

    job = context.job_queue.run_repeating(remind_user, interval=5 * 60 * 60, first=5, chat_id=user_id)
    reminder_jobs[user_id] = job
    await update.message.reply_text("üîî –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–¥–∞—á–∞—Ö –∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤!")

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    reply = await asyncio.to_thread(ask_ai, user_message)
    await update.message.reply_text(reply)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("todo", todo))
    app.add_handler(CommandHandler("tasks", tasks))
    app.add_handler(CommandHandler("done", done))
    app.add_handler(CommandHandler("remind", remind))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

