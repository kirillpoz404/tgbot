
import sqlite3
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dateutil import parser
from datetime import datetime
import os
# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TELEGRAM_TOKEN = "TELEGRAM_TOKEN"
OPENAI_KEY = "OPENAI_KEY"

openai.api_key = OPENAI_KEY

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# ==== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====
conn = sqlite3.connect("assistant.db")
cur = conn.cursor()

cur.execute("""CREATE TABLE IF NOT EXISTS todos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    task TEXT,
    done INTEGER DEFAULT 0
)""")

cur.execute("""CREATE TABLE IF NOT EXISTS notes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    note TEXT
)""")

cur.execute("""CREATE TABLE IF NOT EXISTS reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    text TEXT,
    remind_at TEXT
)""")
conn.commit()


# ==== GPT ====
def ask_gpt(prompt: str) -> str:
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=300
    )
    return response.choices[0].message["content"]


def check_reminder_with_gpt(message: str) -> dict:
    """
    GPT —Ä–µ—à–∞–µ—Ç, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.
    –ï—Å–ª–∏ –¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { "reminder": true, "text": "...", "time": "2025-09-27 18:00" }
    """
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ–∫–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."},
            {"role": "user", "content": f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{message}'. –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤–µ—Ä–Ω–∏ JSON –≤–∏–¥–∞: {{'reminder': true, 'text': '...', 'time': 'YYYY-MM-DD HH:MM'}}. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî {{'reminder': false}}"}
        ],
        max_tokens=100
    )
    content = response.choices[0].message["content"]

    try:
        import json
        result = json.loads(content.replace("'", '"'))  # –Ω–∞ —Å–ª—É—á–∞–π –∫–∞–≤—ã—á–µ–∫
        return result
    except:
        return {"reminder": False}


# ==== –•–ï–ù–î–õ–ï–†–´ ====
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
                         "–Ø –º–æ–≥—É –±—ã—Ç—å —É–º–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏, –∑–∞–º–µ—Ç–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
                         "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å: '–Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 10 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ' üòâ")


# --- TODO ---
@dp.message_handler(commands=["todo"])
async def add_todo(message: types.Message):
    task = message.get_args()
    if not task:
        await message.answer("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: `/todo –ö—É–ø–∏—Ç—å —Ö–ª–µ–±`")
        return
    cur.execute("INSERT INTO todos (user_id, task) VALUES (?, ?)",
                (message.from_user.id, task))
    conn.commit()
    await message.answer(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ‚úÖ {task}")


@dp.message_handler(commands=["tasks"])
async def show_tasks(message: types.Message):
    cur.execute("SELECT id, task, done FROM todos WHERE user_id=?",
                (message.from_user.id,))
    tasks = cur.fetchall()
    if not tasks:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üìù")
    else:
        text = "\n".join([f"{'‚úÖ' if done else 'üîπ'} {tid}. {task}"
                          for tid, task, done in tasks])
        await message.answer(text)


# --- NOTES ---
@dp.message_handler(commands=["note"])
async def add_note(message: types.Message):
    note = message.get_args()
    if not note:
        await message.answer("–ù–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: `/note –ò–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞`")
        return
    cur.execute("INSERT INTO notes (user_id, note) VALUES (?, ?)",
                (message.from_user.id, note))
    conn.commit()
    await message.answer("–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üìù")


@dp.message_handler(commands=["notes"])
async def show_notes(message: types.Message):
    cur.execute("SELECT id, note FROM notes WHERE user_id=?",
                (message.from_user.id,))
    notes = cur.fetchall()
    if not notes:
        await message.answer("–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç üìí")
    else:
        text = "\n".join([f"üîπ {nid}. {note}" for nid, note in notes])
        await message.answer(text)


# --- REMINDERS ---
async def send_reminder(user_id, text):
    await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")


@dp.message_handler(commands=["remind"])
async def add_reminder(message: types.Message):
    args = message.get_args()
    if not args:
        await message.answer("–§–æ—Ä–º–∞—Ç: `/remind –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ 27.09.2025 18:00`")
        return

    try:
        dt = parser.parse(args, fuzzy=True, dayfirst=True)
        text = args.replace(str(dt.date()), "").replace(str(dt.time()), "").strip()

        cur.execute("INSERT INTO reminders (user_id, text, remind_at) VALUES (?, ?, ?)",
                    (message.from_user.id, text, dt.isoformat()))
        conn.commit()

        scheduler.add_job(send_reminder, "date", run_date=dt,
                          args=[message.from_user.id, text])

        await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚è∞: {text} –≤ {dt}")
    except Exception:
        await message.answer("–ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è üòî –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫: `/remind –¢–µ–∫—Å—Ç 27.09.2025 18:00`")


# --- GPT + –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ---
@dp.message_handler()
async def chat_with_gpt(message: types.Message):
    # –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–æ—Å–∏–º —É GPT ‚Äî —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?
    result = check_reminder_with_gpt(message.text)

    if result.get("reminder"):
        try:
            dt = parser.parse(result["time"], fuzzy=True, dayfirst=True)
            text = result["text"]

            cur.execute("INSERT INTO reminders (user_id, text, remind_at) VALUES (?, ?, ?)",
                        (message.from_user.id, text, dt.isoformat()))
            conn.commit()

            scheduler.add_job(send_reminder, "date", run_date=dt,
                              args=[message.from_user.id, text])

            await message.answer(f"–ü–æ–Ω—è–ª! –Ø —Å–æ–∑–¥–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚è∞: {text} –≤ {dt}")
            return
        except Exception:
            await message.answer("–í–∏–∂—É, —á—Ç–æ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–æ –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è üòî –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00 ...`")

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –æ–±—ã—á–Ω—ã–π —á–∞—Ç —Å GPT
    reply = ask_gpt(message.text)
    await message.answer(reply)


# ==== –ó–ê–ü–£–°–ö ====
if __name__ == "__main__":
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)
TG
