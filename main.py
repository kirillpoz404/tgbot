import os
import sqlite3
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from openai import OpenAI

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_KEY")

if not TELEGRAM_TOKEN or not OPENAI_KEY:
    raise ValueError("‚ùå Missing TELEGRAM_TOKEN or OPENAI_KEY in .env file")

client = OpenAI(api_key=OPENAI_KEY)

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• ---
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS tasks (
    task_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    title TEXT NOT NULL,
    description TEXT,
    due_date TIMESTAMP,
    completed INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
)
""")

conn.commit()

# --- –ö–û–ú–ê–ù–î–´ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    cursor.execute("""
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    """, (user.id, user.username, user.first_name, user.last_name))
    conn.commit()

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, /tasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤–æ–ø—Ä–æ—Å."
    )


async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>")
        return

    title = " ".join(context.args)
    cursor.execute("INSERT INTO tasks (user_id, title) VALUES (?, ?)", (update.effective_user.id, title))
    conn.commit()
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {title}")


async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT title, completed FROM tasks WHERE user_id=?", (update.effective_user.id,))
    tasks = cursor.fetchall()

    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á üóíÔ∏è")
        return

    response = "\n".join(
        [f"{'‚úÖ' if t[1] else 'üîπ'} {t[0]}" for t in tasks]
    )
    await update.message.reply_text(f"–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{response}")


async def ai_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    await update.message.chat.send_action("typing")

    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –∏–¥–µ—è–º–∏."},
                {"role": "user", "content": user_message}
            ]
        )
        reply = completion.choices[0].message.content
        await update.message.reply_text(reply)

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API")
        print("OpenAI error:", e)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/add <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/tasks ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ ‚Äî –∏ —è –ø–æ–º–æ–≥—É —Å–æ–≤–µ—Ç–æ–º üí¨"
    )


# --- –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add", add_task))
    app.add_handler(CommandHandler("tasks", list_tasks))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ai_chat))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
